TASK 1 

#include <iostream>
using namespace std;
int summation(int arr[], int n) {
 int sum = 0;
 for(int i=0; i<n; i++) {
 sum += arr[i];
 }
 return sum;
}
int maximum(int arr[], int n) {
 int max_val = arr[0];
 for(int i=1; i<n; i++) {
 if(arr[i] > max_val) {
 max_val = arr[i];
 }
 }
 return max_val;
}
int main() {
 int n;
 cout << "Enter the length of the array: ";
 cin >> n;
 int arr[n];
 for(int i=0; i<n; i++) {
 cout << "Enter element " << i+1 << ": ";
 cin >> arr[i];
 }
 int sum = summation(arr, n);
 int max_val = maximum(arr, n);
 cout << "Sum of array elements: " << sum << endl;
 cout << "Maximum element in the array: " << max_val << endl;
 return 0;
}


TASK 2

#include <iostream>
#include <cmath>

using namespace std;
// Introducing structs to the code
struct student {
    string regno;
    string name;
    int Age;
    string registered[5];
    string course;
    string course_id;
    int unitmarks[5];
};

void getData(student &s) {
    cout << "Reg no: ";
    cin >> s.regno;
    cout << "Student name: ";
    cin >> s.name;
    cout << "Student age: ";
    cin >> s.Age;
    cout << "Course: ";
    cin >> s.course;
    cout << "Course id: ";
    cin >> s.course_id;
    cout << "Number of courses: ";
    int num_Course;
    cin >> num_Course;
    for (int i = 0; i < num_Course; i++) {
        cout << "Enter unit " << i + 1 << " name: ";
        cin >> s.registered[i];  // corrected: store unit name in registered array
        cout << "Enter mark " << i + 1 << ": ";
        cin >> s.unitmarks[i];
    }
}

float calculateAverage(student &s) {
    int sum = 0;
    float count = 0;
    for (int i = 0; i < 5; i++) {
        if (!s.registered[i].empty()) {
            sum += s.unitmarks[i];
            count++;
        }
    }
    if (count > 0) {
        return static_cast<float>(sum) / count;
    } else {
        return 0;  
    }
}

string computeGrade(float avg) {
    if (avg >= 70.0) {
        return "A";
    } else if (avg >= 60.0) {
        return "B";
    } else if (avg >= 50.0) {
        return "C";
    } else if (avg >= 40.0) {
        return "D";
    } else {
        return "E";
    }
}

int main() {
    student students[5];

    for (int i = 0; i < 5; i++) {
        cout << "Enter details for student " << i + 1 << ":\n";
        getData(students[i]);
    }

    // show student details, add marks, and grades
    for (int i = 0; i < 5; i++) {
        cout << "\nDetails for student " << i + 1 << ":\n";
        cout << "Reg no: " << students[i].regno << "\n";
        cout << "Student name: " << students[i].name << "\n";
        cout << "Student age: " << students[i].Age << "\n";
        cout << "Course: " << students[i].course << "\n";
        cout << "Course id: " << students[i].course_id << "\n";

        // Adding marks
        cout << "Adding marks for student " << i + 1 << ":\n";
        getData(students[i]);

        // Calculate average and calculate grade
        float avg = calculateAverage(students[i]);
        string grade = computeGrade(avg);

        cout << "Average marks: " << avg << "\n";
        cout << "Grade: " << grade << "\n";
    }

    return 0;
}

TASK 3


#include <iostream>
#include <string>

class Student {
private:
    std::string regno;
    std::string name;
    int age;
    std::string registered[5];
    std::string course;
    std::string course_id;
    int unitmarks[5];

public:
    void getData() {
        std::cout << "Reg no: ";
        std::cin >> regno;
        std::cout << "Student name: ";
        std::cin >> name;
        std::cout << "Student age: ";
        std::cin >> age;
        std::cout << "Course: ";
        std::cin >> course;
        std::cout << "Course id: ";
        std::cin >> course_id;
        std::cout << "Number of courses: ";
        int num_Course;
        std::cin >> num_Course;
        for (int i = 0; i < num_Course; i++) {
            std::cout << "Enter unit " << i + 1 << " name: ";
            std::cin >> registered[i];
            std::cout << "Enter mark " << i + 1 << ": ";
            std::cin >> unitmarks[i];
        }
    }

    float calculateAverage() {
        int sum = 0;
        float count = 0;
        for (int i = 0; i < 5; i++) {
            if (!registered[i].empty()) {
                sum += unitmarks[i];
                count++;
            }
        }
        if (count > 0) {
            return static_cast<float>(sum) / count;
        } else {
            return 0;
        }
    }

    std::string computeGrade(float avg) {
        if (avg >= 70.0) {
            return "A";
        } else if (avg >= 60.0) {
            return "B";
        } else if (avg >= 50.0) {
            return "C";
        } else if (avg >= 40.0) {
            return "D";
        } else {
            return "E";
        }
    }

    void displayDetails() {
        std::cout << "\nDetails for student:\n";
        std::cout << "Reg no: " << regno << "\n";
        std::cout << "Student name: " << name << "\n";
        std::cout << "Student age: " << age << "\n";
        std::cout << "Course: " << course << "\n";
        std::cout << "Course id: " << course_id << "\n";
    }

    void addMarks() {
        std::cout << "Adding marks:\n";
        getData();
    }
};

int main() {
    Student students[5];

    for (int i = 0; i < 5; i++) {
        std::cout << "Enter details for student " << i + 1 << ":\n";
        students[i].getData();
    }

  //show grades
    for (int i = 0; i < 5; i++) {
        students[i].displayDetails();
        students[i].addMarks();

        // Calculate average
        float avg = students[i].calculateAverage();
        std::string grade = students[i].computeGrade(avg);

        std::cout << "Average marks: " << avg << "\n";
        std::cout << "Grade: " << grade << "\n";
    }

    return 0;
}


 TASK 4
               USER PROGRAMES
                     |
                   uses
                     | 
                     |
                list (ADT)
                 {insert()
                  remove()
                  find()}
                  /   \ 
                 /     \
          implements    implements     
             /            \
           /               \
      array              linked list
